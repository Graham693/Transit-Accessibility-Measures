## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[3:5]
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
head(origins)
head(destinations)
destinations <- destinations[3:5]
head(destinations)
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations[:, 3:5]
destinations[, 3:5]
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[, 3:5]
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
head(origins)
head(destinations)
nrow(destinations)
nrow(origins)
nrow(origins)*nrow(destinations)
#nrow(origins)*nrow(destinations)
count(unique*origins.id))
#nrow(origins)*nrow(destinations)
count(unique(origins.id))
#nrow(origins)*nrow(destinations)
length(unique(origins.id))
#nrow(origins)*nrow(destinations)
unique(origins.id)
origins.id
#nrow(origins)*nrow(destinations)
unique(origins['id'])
origins['id']
origins
origins[1]
origins[,1]
#nrow(origins)*nrow(destinations)
unique(origins[,1])
#nrow(origins)*nrow(destinations)
length(unique(origins[,1]))
#nrow(origins)*nrow(destinations)
nrow(unique(origins[,1]))
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
nrow(destinations)
nrow(unique(destinations[,1]))
# Main
library(r5r)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
# Supplementary
library(sf)
library(data.table)
library(ggplot2)
library(mapview); mapviewOptions(platform = 'leafgl')
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
head(origins)
head(destinations)
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_amenities_2.csv"))
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 2000 # meters
max_trip_duration <- 120 # minutes
max_rides <- 3 # 3 transfers max
head(origins)
head(destinations)
destinations <- destinations[,2:]
destinations <- destinations[,2:4]
head(destinations)
head(origins)
head(destinations)
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations)
nrow(unique(destinations[,1]))
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
## 1) Build transport network, pointing to path where OSM and GTFS data are located
# (They're in the current working directory)
path = getwd()
r5r_core <- setup_r5(data_path = path, verbose = FALSE)
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations <-  as.numeric(destinations[,2:3])
destinations <-  as.numeric(destinations[,2])
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations <-  as.numeric(destinations[c('lat','lon')])
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations['lat'] <-  as.numeric(destinations['lat'])
head(origins)
head(origins)
head(destinations)
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat])
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
head(origins)
head(destinations)
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
head(destinations)
destinations
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- as.numeric(destinations[,2:4])
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
destinations <- destinations[complete.cases(destinations)]
destinations
head(origins)
head(destinations)
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 2000 # meters
max_trip_duration <- 120 # minutes
max_rides <- 3 # 3 transfers max
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
ttm.head(5)
head(ttm)
describe(ttm)
info(ttm)
summary(ttm)
summary(ttm)
unique(ttm$fromId)
nrow(unique(ttm$fromId))
length(unique(ttm$fromId))
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
length(unique(ttm$fromId))
length(unique(ttm$toId))
# extract OSM network
street_net <- street_network_to_sf(r5r_core)
# Main
library(r5r)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
# Supplementary
library(sf)
library(data.table)
library(ggplot2)
library(mapview); mapviewOptions(platform = 'leafgl')
# extract OSM network
street_net <- street_network_to_sf(r5r_core)
.jinit()
# extract OSM network
street_net <- street_network_to_sf(r5r_core)
# Main
library(r5r)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
# Supplementary
library(sf)
library(data.table)
library(ggplot2)
library(mapview); mapviewOptions(platform = 'leafgl')
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
## 1) Build transport network, pointing to path where OSM and GTFS data are located
r5r_core <- setup_r5(data_path = getwd(), verbose = FALSE)
# 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
# 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
destinations <- destinations[complete.cases(destinations)]
# 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
#destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
head(origins)
head(destinations)
# 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
#destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
head(origins)
head(destinations)
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 1000 # 1 km
max_trip_duration <- 120 # 2 hours
max_rides <- 4 # max transfers
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
#destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
#destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
# Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
## 1) Build transport network, pointing to path where OSM and GTFS data are located
r5r_core <- setup_r5(data_path = getwd(), verbose = FALSE)
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
#destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
origins <- origins[, c(1,3,4)]
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
origins <- origins[, c(1,3,4)]
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
destinations <- destinations[, 1:3]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 1000 # 1 km
max_trip_duration <- 120 # 2 hours
max_rides <- 4 # max transfers
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
colnames(origins)
## 2) Load origin/destination points
origins <- fread(file.path("../../data/clean", "vancouver_db.csv"))
origins <- origins[, c(1,3,4)]
colnames(origins)[1] <- 'id'
destinations <- fread(file.path("../../data/clean", "vancouver_facilities_2.csv"))
destinations <- destinations[, 1:3]
destinations$lat <-  as.numeric(destinations$lat) # char to numeric
destinations$lon <-  as.numeric(destinations$lon) # char to numeric
destinations <- destinations[complete.cases(destinations)] # remove NA rows
# Peek
head(origins)
head(destinations)
# Check
c(nrow(origins), nrow(unique(origins[,1])))
c(nrow(destinations), nrow(unique(destinations[,1])))
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
summary(ttm)
c(length(unique(ttm$fromId)), nrow(unique(origins[,1])))
c(length(unique(ttm$toId)), nrow(unique(destinations[,1])))
paste('% Origins considered:', length(unique(ttm$fromId))/nrow(origins) *100)
paste('% Destinations considered:', length(unique(ttm$toId))/nrow(destinations) *100)
paste('% Origins considered:', round(length(unique(ttm$fromId))/nrow(origins) *100, 2))
paste('% Destinations considered:', round(length(unique(ttm$toId))/nrow(destinations) *100, 2))
paste('% Origins considered:', round(length(unique(ttm$fromId))/nrow(origins) *100, 2), '%')
paste('% Destinations considered:', round(length(unique(ttm$toId))/nrow(destinations) *100, 2), '%')
paste('Percent Origins considered:', round(length(unique(ttm$fromId))/nrow(origins) *100, 2), '%')
paste('Percent Destinations considered:', round(length(unique(ttm$toId))/nrow(destinations) *100, 2), '%')
# extract OSM network
street_net <- street_network_to_sf(r5r_core)
# plot
ggplot() +
geom_sf(data = street_net$edges, color='gray85') +
#geom_sf(data = ttm, aes(color=mode)) +
facet_wrap(.~option) +
theme_void()
# plot
ggplot() +
geom_sf(data = street_net$edges, color='gray85') +
#geom_sf(data = ttm, aes(color=mode)) +
#facet_wrap(.~option) +
theme_void()
# Interactive View
mapview(street_net)
install.packages('leafgl')
# Interactive View
mapview(street_net)
library(tidyverse)
tmm
ttm
origin_scores <- ttm %>%
group_by(fromId) %>%
summarise(
avg_time = mean(travel_time),
sd_time = sd(travel_time),
n_destinations = count(toId)
)
origin_scores <- ttm %>%
group_by(fromId) %>%
summarise(
avg_time = mean(travel_time),
sd_time = sd(travel_time),
n_destinations = length(toId)
)
origin_scores
grouped_origins <- ttm %>%
group_by(fromId) %>%
summarise(
avg_time = mean(travel_time),
sd_time = sd(travel_time),
n_destinations = length(toId)
)
grouped_origins
1/grouped_origins$avg_time
# Convert to a score (naive)
# 1 is perfect transit accessibility
# 0 is no transit accessibility
# Higher avg_time = Lower score (inverse)
# Higher sd_time = Lower score (divide by sd)
# More destinations = Higher score (multiply)
# score = (1/avg_time)/sd_time*n_destinations
origin_scores$fromId <- grouped_origins$fromId
origin_scores$score <- (1/grouped_origins$avg_time)/grouped_origins$sd_time * grouped_origins$n_destinations
origin_scores
View(origin_scores)
View(origin_scores)
# score = (1/avg_time)/sd_time*n_destinations
origin_scores <- NULL
origin_scores$fromId <- grouped_origins$fromId
origin_scores$score <- (1/grouped_origins$avg_time)/grouped_origins$sd_time * grouped_origins$n_destinations
origin_scores
# score = (1/avg_time)/sd_time*n_destinations
origin_scores <- data.frame()
origin_scores$fromId <- grouped_origins$fromId
# score = (1/avg_time)/sd_time*n_destinations
og_scores$fromId <- grouped_origins$fromId
grouped_origins$score <- (1/grouped_origins$avg_time)/grouped_origins$sd_time * grouped_origins$n_destinations
origin_scores <- grouped_origins[,c(1,4)]
origin_scores
origin_scores <- grouped_origins[,c(1,5)]
origin_scores
# Normalize
min_ <- min(origin_scores$score)
max_ <- max(origin_scores$score)
origin_scores$score <- (origin_scores$score-min_)/(max_-min_)
origin_scores
origin_scores <- grouped_origins[,c(1,5)]
origin_scores
# Normalize
min_ <- min(origin_scores$score)
min_
origin_scores
max_ <- max(origin_scores$score)
max_
max_ <- max(origin_scores$score, na.rm=TRUE)
max_
# Normalize
min_ <- min(origin_scores$score, na.rm=TRUE)
max_ <- max(origin_scores$score, na.rm=TRUE)
origin_scores$score <- (origin_scores$score-min_)/(max_-min_)
origin_scores
colMax(origin_scores)
max(origin_scores)
max(origin_scores$score)
max(origin_scores$score, na.rm=TRUE)
origin_scores
