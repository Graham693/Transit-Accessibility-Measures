# Main
library(r5r)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
# Supplementary
library(sf)
library(data.table)
library(ggplot2)
library(mapview); mapviewOptions(platform = 'leafgl')
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
## 1) Build transport network, pointing to path where OSM and GTFS data are located
#     (They're in the current working directory)
path = getwd()
r5r_core <- setup_r5(data_path = path, verbose = FALSE)
## 2) Load origin/destination points
origins <-  read.csv(system.file('../../data/clean/vancouver_db.csv', package = "r5r"))
## 2) Load origin/destination points
origins <-  read.csv(system.file('vancouver_db.csv', package = "r5r"))
system.file('vancouver_db.csv', package = "r5r")
## 2) Load origin/destination points
origins <-  read.csv(system.file('vancouver_db.csv', package = "r5r"))
## 2) Load origin/destination points
origins <-  read.csv(system.file('vancouver_db.csv', package = "r5r"))
## 2) Load origin/destination points
origins <-  read.csv(system.file('vancouver_db.csv', package = "r5r"))
## 2) Load origin/destination points
origins <-  read.csv(system.file('vancouver_db.csv', package = "r5r"))
## 2) Load origin/destination points
origins <-  read.csv('vancouver_db.csv')
destinations <- read.csv('vancouver_facilities_2.csv')
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 2000 # meters
max_trip_duration <- 120 # minutes
max_rides <- 3 # 3 transfers max
```{r}
head(origins)
head(destinations)
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
destinations[:,3:5]
destinations <- destinations[3:5]
destinations <- read.csv('vancouver_facilities_2.csv')
destinations[3:5]
destinations <- destinations[3:5]
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
head(origins)
head(destinations)
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[3:5]
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
head(origins)
head(destinations)
destinations <- destinations[3:5]
head(destinations)
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations[:, 3:5]
destinations[, 3:5]
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[, 3:5]
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
head(origins)
head(destinations)
nrow(destinations)
nrow(origins)
nrow(origins)*nrow(destinations)
#nrow(origins)*nrow(destinations)
count(unique*origins.id))
#nrow(origins)*nrow(destinations)
count(unique(origins.id))
#nrow(origins)*nrow(destinations)
length(unique(origins.id))
#nrow(origins)*nrow(destinations)
unique(origins.id)
origins.id
#nrow(origins)*nrow(destinations)
unique(origins['id'])
origins['id']
origins
origins[1]
origins[,1]
#nrow(origins)*nrow(destinations)
unique(origins[,1])
#nrow(origins)*nrow(destinations)
length(unique(origins[,1]))
#nrow(origins)*nrow(destinations)
nrow(unique(origins[,1]))
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
nrow(destinations)
nrow(unique(destinations[,1]))
# Main
library(r5r)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
# Supplementary
library(sf)
library(data.table)
library(ggplot2)
library(mapview); mapviewOptions(platform = 'leafgl')
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
head(origins)
head(destinations)
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
#destinations <- destinations[3:5]
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_amenities_2.csv"))
#read.csv('../../data/clean/vancouver_db.csv', package = "r5r")
#read.csv('../../data/clean/vancouver_facilities_2.csv', package = "r5r")
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 2000 # meters
max_trip_duration <- 120 # minutes
max_rides <- 3 # 3 transfers max
head(origins)
head(destinations)
destinations <- destinations[,2:]
destinations <- destinations[,2:4]
head(destinations)
head(origins)
head(destinations)
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations)
nrow(unique(destinations[,1]))
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
## Allocate RAM memory to Java
options(java.parameters = "-Xmx4g")
## 1) Build transport network, pointing to path where OSM and GTFS data are located
# (They're in the current working directory)
path = getwd()
r5r_core <- setup_r5(data_path = path, verbose = FALSE)
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations <-  as.numeric(destinations[,2:3])
destinations <-  as.numeric(destinations[,2])
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations <-  as.numeric(destinations[c('lat','lon')])
## 2) Load origin/destination points
#rigins <-  read.csv('vancouver_db.csv')
#destinations <- read.csv('vancouver_facilities_2.csv')
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations['lat'] <-  as.numeric(destinations['lat'])
head(origins)
head(origins)
head(destinations)
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat])
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
head(origins)
head(destinations)
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
head(destinations)
destinations
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- as.numeric(destinations[,2:4])
## 2) Load origin/destination points
origins <- fread(file.path(getwd(), "vancouver_db.csv"))
destinations <- fread(file.path(getwd(), "vancouver_facilities_2.csv"))
destinations <- destinations[,2:4]
destinations$lat <-  as.numeric(destinations$lat)
destinations$lon <-  as.numeric(destinations$lon)
destinations <- destinations[complete.cases(destinations)]
destinations
head(origins)
head(destinations)
## 3) Set constraints
# Non-transit : WALK, BICYCLE, CAR, BICYCLE_RENT, CAR_PARK
# Transit: TRAM, SUBWAY, RAIL, BUS, FERRY, CABLE_CAR, GONDOLA, FUNICULAR
mode <- c('WALK', 'TRANSIT')
max_walk_dist <- 2000 # meters
max_trip_duration <- 120 # minutes
max_rides <- 3 # 3 transfers max
nrow(origins) == nrow(unique(origins[,1]))
nrow(destinations) == nrow(unique(destinations[,1]))
## 4) compute travel time matrix
# default walk speed = 3.6 km/h
# default departure_datetime is sys.time()
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = destinations,
mode = mode,
time_window = 2, # window in minutes for which r5r will calculate multiple travel time matrices departing each minute
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = TRUE)
ttm.head(5)
head(ttm)
describe(ttm)
info(ttm)
summary(ttm)
