boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
range(c(llikelihoodValues,range(froglike ))
range(c(llikelihoodValues,range(froglike )))
c(llikelihoodValues,range(froglike ))
max(c(llikelihoodValues,range(froglike )))
min(c(llikelihoodValues,range(froglike )))
c(llikelihoodValues,range(froglike ))
froglike
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
froglike
boxplot(froglike))
boxplot(froglike))
boxplot(froglike)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
points(llikelihoodValues, pch=16, col=2)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
c(llikelihoodValues,range(froglike ))
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
par(mar=c(1, 4, .1, .1))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
ACF.qpoisson<-glm(ACF.Total~ T + INJ ,data = sect6data, family=quasipoisson)
summary(ACF.qpoisson)
# nagative binomial
suppressMessages(library(MASS))
ACF.nb <- glm.nb(ACF.Total~ T + INJ,data = sect6data)
summary(ACF.nb)
c<-matrix(c(2,3,0,0,0),5,1,byrow=T)
A<-matrix(c(2,1,1,0,0,1,1,0,1,0,-1,1,0,0,1),3,5,byrow=T)
b<-matrix(c(10,6,4),3,1,byrow=T)
x<-matrix(c(1,3,5,2,2),5,1,byrow=T)
A%*%x
y<-matrix(c(2,2,2),3,1,byrow=T)
s<-matrix(c(2,3,2,2,2),5,1,byrow=T)
t(A)%*%y-s
X<-diag(c(1,3,5,2,2))
S<-diag(c(2,3,2,2,2))
dy<--solve(A%*%X%*%solve(S)%*%t(A))%*%b
ds<-t(A)%*%dy
dx<--x-X%*%solve(S)%*%ds
alpha<-0.999*min(minimum(-x))
install.packages("pracma")
library("pracma")
dot(x,s)
```{R}
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("<=","<=","<=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
```{R}
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=>")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
```{R}
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=>")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
```{R}
# 3 (P) maximizexsubjectto1·x=−1andx≥0,
f.obj<-c(1)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=>")
f.rhs<-c(-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
```
```{R}
# 3 (P) maximizexsubjectto1·x=−1andx≥0,
f.obj<-c(1)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=")
f.rhs<-c(-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
```
```{R}
# 3 (P) maximizexsubjectto1·x=−1andx≥0,
f.obj<-c(1)
f.con<-matrix(c(1,1,1,1,1,1),3,2,byrow=T)
f.dir<-c("=")
f.rhs<-c(-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
```
```{R}
# 4
f.obj<-c(1,0,0)
f.con<-matrix(c(1,-1,0,0,0,1),2,3,byrow=T)
f.dir<-c("=")
f.rhs<-c(1,-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
```
```{R}
# 4
f.obj<-c(1,0,0)
f.con<-matrix(c(1,-1,0,0,0,1),2,3,byrow=T)
f.dir<-c("=")
f.rhs<-c(1,-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
```
knitr::opts_chunk$set(echo = TRUE)
f.obj<-c(2.89,4.69,2.19,2.69,2.19,2.19)
f.con<-matrix(c(360,1020,380,490,25,380,
360,1020,380,490,25,380,
180,540,790,1030,15,930,
43,118,0,0,3,8),4,6,byrow=T)
f.dir<-c(">=","<=","<=","<=")
f.rhs<-c(600,800,1200,60)
out<-lp("min", f.obj, f.con, f.dir, f.rhs,all.int=T)
library("lpSolve")
f.obj<-c(2,3)
f.con<-matrix(c(2,1,1,1,-1,1),3,2,byrow=T)
f.dir<-c("<=","<=","<=")
f.rhs<-c(10,6,4)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
f.obj<-c(2.89,4.69,2.19,2.69,2.19,2.19)
f.con<-matrix(c(360,1020,380,490,25,380,
360,1020,380,490,25,380,
180,540,790,1030,15,930,
43,118,0,0,3,8),4,6,byrow=T)
f.dir<-c(">=","<=","<=","<=")
f.rhs<-c(600,800,1200,60)
out<-lp("min", f.obj, f.con, f.dir, f.rhs,all.int=F)
out$solution
out
f.con
f.obj<-c(2.89,4.69,2.19,2.69,2.19,2.19)
f.con<-matrix(c(360,1020,380,490,25,380,
360,1020,380,490,25,380,
180,540,790,1030,15,930,
43,118,0,0,3,8),4,6,byrow=T)
f.dir<-c(">=","<=","<=","<=")
f.rhs<-c(600,800,1200,60)
out<-lp("min", f.obj, f.con, f.dir, f.rhs,all.int=T)
out$solution
out
f.con
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=>")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 2 possibility max x subject to 0
f.obj<-c(1)
# 2 possibility max x subject to 0
f.obj<-c(1)
f.con<-matrix(c(0,0,0,0,0,0),3,2,byrow=T)
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con<-matrix(c(0byrow=T)
f.con<-matrix(c(0,byrow=T)
f.con<-matrix(c(0,byrow=T))
f.con<-matrix(c(0,byrow=T))
f.con
# 2 possibility max x subject to 0
f.obj<-c(1)
f.con<-matrix(c(0,byrow=T))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
f.con<-matrix(c(0))
# 2 possibility max x subject to 0
f.obj<-c(1)
f.con<-matrix(c(0))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 4
f.obj<-c(1,0,0)
f.con<-matrix(c(1,-1,0,0,0,1),2,3,byrow=T)
f.dir<-c("=")
f.rhs<-c(1,-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
# 3 (P) maximizexsubjectto1·x=−1andx≥0,
f.obj<-c(1)
f.con<-matrix(0)
f.dir<-c("=")
f.rhs<-c(-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 4
f.obj<-c(1,0,0)
f.con<-matrix(c(1,-1,0,0,0,1),2,3,byrow=T)
f.dir<-c("=")
f.rhs<-c(1,-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
f.con
# 4
f.obj<-c(1,0,0)
f.con<-matrix(c(1,-1,0,0,0,1),2,3,byrow=T)
f.dir<-c("=")
f.rhs<-c(1,-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 2 possibility max x subject to 0
f.obj<-c(1)
f.con<-matrix(c(0))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(0))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 3 (P) maximizexsubjectto1·x=−1andx≥0,
f.obj<-c(1)
f.con<-matrix(1)
f.dir<-c("=")
f.rhs<-c(-1)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(1))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
# 2 possibility max x subject to 0
f.obj<-c(0)
f.con<-matrix(c(2))
f.dir<-c("=")
f.rhs<-c(0)
out<-lp("max", f.obj, f.con, f.dir, f.rhs)
out$solution
out
beta(26,87)
dbeta(26,87)
beta(26,26+87-1)
beta(26+1,87+1-26)
knitr::opts_chunk$set(echo = TRUE)
library(r5r)
library(sf)
library(rJava)
library(data.table)
library(ggplot2)
library(mapview)
library(tidyr)
library(readr)
mapviewOptions(platform = 'leafgl')
ver <- rJava::.jcall("java.lang.System","S","getProperty","java.version")
ver <- rJava::jcall("java.lang.System","S","getProperty","java.version")
# check Java version installed locally ------------------------------------------------------------
rJava::.jinit()
ver <- rJava::.jcall("java.lang.System","S","getProperty","java.version")
ver <- as.numeric(gsub("\\..*","",ver))
# check Java version installed locally ------------------------------------------------------------
rJava::.jinit()
ver <- rJava::.jcall("java.lang.System","S","getProperty","java.version")
ver <- as.numeric(gsub("\\..*","",ver))
knitr::opts_chunk$set(echo = TRUE)
# CRAN
#install.packages('r5r')
#install.packages('mapview')
# github
devtools::install_github("ipeaGIT/r5r", subdir = "r-package")
library(r5r)
library(sf)
library(rJava)
library(data.table)
library(ggplot2)
library(mapview)
library(tidyr)
library(readr)
library(uuid)
mapviewOptions(platform = 'leafgl')
setwd("~/Desktop/MDS/data599/r5r")
POI <- read_csv("vancouver_facilities.csv")
DBs <- read_csv("vancouver_db.csv")
options(java.parameters = "-Xmx2G")
# Indicate the path where OSM and GTFS data are stored
r5r_core <- setup_r5(data_path="/Users/yuxuancui/Desktop/MDS/data599/r5r", version = "6.2.0", verbose = TRUE, temp_dir = FALSE)
# small testing set
head(DBs)
head(POI)
# length of POI
POI$Latitude<-as.numeric(POI$Latitude)
POI$Longitude<-as.numeric(POI$Longitude)
lepoi=nrow(POI$Latitude)
POI
origins<-DBs%>%dplyr::select(DAUID,lat,lon)
test_poi<-POI%>%dplyr::filter(ODCAF_Facility_Type=="art or cultural centre" )%>%dplyr::select(Facility_Name,Latitude,Longitude)
head(test_poi)
head(origins)
colnames(origins)[1] <- "id"
colnames(test_poi)[1] <- "id"
colnames(test_poi)[2] <-"lat"
colnames(test_poi)[3]<-"lon"
head(test_poi)
# set inputs
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 5000
max_trip_duration <- 3000
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = test_poi,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
head(ttm)
head(test_poi)
# set inputs
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 50000000
max_trip_duration <- 3000
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = origins,
destinations = test_poi,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
verbose = FALSE)
library(r5r)
library(sf)
library(rJava)
library(data.table)
library(ggplot2)
library(mapview)
library(tidyr)
library(readr)
library(uuid)
mapviewOptions(platform = 'leafgl')
